services:
  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    container_name: frontend
    restart: always
    environment:
      -  APP_MODE=${APP_MODE}
      -  NEXT_PUBLIC_API_HOST=${NEXT_PUBLIC_API_HOST}
      -  NEXT_PUBLIC_API_PORT=${NEXT_PUBLIC_API_PORT}
    networks:
      - my_network
    ports:
      - 3000:3000

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    container_name: backend
    restart: always
    environment:
      -  APP_ENV=${APP_ENV}
      -  POSTGRES_USER=${POSTGRES_USER}
      -  POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      -  POSTGRES_DB=${POSTGRES_DB}
      -  POSTGRES_HOST=${POSTGRES_HOST}
      -  POSTGRES_PORT=${POSTGRES_PORT}
      -  BACKEND_HOST=${BACKEND_HOST}
      -  BACKEND_PORT=${BACKEND_PORT}
      -  FRONTEND_HOST=${FRONTEND_HOST}
      -  FRONTEND_PORT=${FRONTEND_PORT}  
    networks:
      - my_network
    ports:
      - 8000:8000
    depends_on:
      - db

  db:
    image: postgres:17
    container_name: postgres_db
    restart: always
    environment:
      -  POSTGRES_USER=${POSTGRES_USER}
      -  POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      -  POSTGRES_DB=${POSTGRES_DB}
    networks:
      - my_network
    volumes:
      - pg_data:/var/lib/postgresql/data

networks:
  my_network:
    driver: bridge

volumes:
  pg_data:
